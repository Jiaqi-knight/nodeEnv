{
  "compilerOptions": {
  // 参考配置
    "baseUrl": ".",
    "outDir": "build",
    "module": "esnext",
    "target": "es5",
    "lib": ["esnext", "dom"],
    "sourceMap": true,
    "allowJs": true,
    "jsx": "react",
    "moduleResolution": "node",
    "rootDir": ".",
    "forceConsistentCasingInFileNames": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "noImplicitAny": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "strictNullChecks": true,
    "importHelpers": true,
    "suppressImplicitAnyIndexErrors": true,
    "experimentalDecorators": true,
    "downlevelIteration": true,
    "allowSyntheticDefaultImports": true,
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "exclude": ["node_modules", "dist", "build", "mock"]
}

// {
//   "compilerOptions": {
//     /* Basic Options */
//     // "incremental": true,                   /* 对应增量汇编 Enable incremental compilation */
//     "target": "es5",                          /* 指定es版本  Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */
//     "module": "commonjs",                     /* 指定生成哪个模块系统代码 Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
//     // "lib": [],                             /* 编译过程中需要引入的库文件的列表 Specify library files to be included in the compilation. */
//     // "allowJs": true,                       /* 允许编译js文件 Allow javascript files to be compiled. */
//     // "checkJs": true,                       /* 报告js文件中的错误 Report errors in .js files. */
//     // "jsx": "preserve",                     /* 在 .tsx文件里支持JSX Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
//     // "declaration": true,                   /* 生成相应的".d.ts"文件。 Generates corresponding '.d.ts' file. */
//     // "declarationMap": true,                /* 为每一个ts文件都生成对应的"d.ts"文件 Generates a sourcemap for each corresponding '.d.ts' file. */
//     // "sourceMap": true,                     /* 是否生成map文件 Generates corresponding '.map' file. */
//     // "outFile": "./",                       /* 输出为单个文件 Concatenate and emit output to single file. */
//     "outDir": "./dist",                        /* 输出目录 Redirect output structure to the directory. */
//     "rootDir": "./src",                       /* 工作目录 Specify the root directory of input files. Use to control the output directory structure with --outDir. */
//     // "composite": true,                     /* 项目编译 Enable project compilation */
//     // "tsBuildInfoFile": "./",               /* 指定文件以存储增量编译信息 Specify file to store incremental compilation information */
//     "removeComments": true,                /* 是否移除注释 Do not emit comments to output. */
//     // "noEmit": true,                        /* 不输出任何文件 Do not emit outputs. */
//     // "importHelpers": true,                 /* 从tslib导入 Import emit helpers from 'tslib'. */
//     // "downlevelIteration": true,            /* 为es5,es3提供for of和destructuring 完全的支持 Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
//     // "isolatedModules": true,               /* 把每个文件作为单独的模块进行传输 Transpile each file as a separate module (similar to 'ts.transpileModule'). */

//     /* Strict Type-Checking Options */
//     "strict": true,                           /* 启用严格模式 Enable all strict type-checking options. */
//     // "noImplicitAny": true,                 /* 是否默认禁用 any Raise error on expressions and declarations with an implied 'any' type. */
//     // "strictNullChecks": true,              /* 启用严格的空检查  Enable strict null checks. */
//     // "strictFunctionTypes": true,           /* 启用对函数类型的严格检查  Enable strict checking of function types. */
//     // "strictBindCallApply": true,           /* 对函数启用严格的“bind”、“call”和“apply”方法。 Enable strict 'bind', 'call', and 'apply' methods on functions. */
//     // "strictPropertyInitialization": true,  /* 在类中启用属性初始化的严格检查。  Enable strict checking of property initialization in classes. */
//     // "noImplicitThis": true,                /* 对隐含“any”类型的“this”表达式引发错误。  Raise error on 'this' expressions with an implied 'any' type. */
//     // "alwaysStrict": true,                  /* 以严格模式解析并为每个源文件生成 "use strict"语句 Parse in strict mode and emit "use strict" for each source file. */

//     /* Additional Checks */
//     // "noUnusedLocals": true,                /* 提示未使用的局部变量的错误。 Report errors on unused locals. */
//     // "noUnusedParameters": true,            /* 提示未使用参数的错误。 Report errors on unused parameters. */
//     // "noImplicitReturns": true,             /* 不是函数中的所有代码路径都返回值时报告错误。 Report error when not all code paths in function return a value. */
//     // "noFallthroughCasesInSwitch": true,    /* 在switch语句中报告故障转移情况的错误。  Report errors for fallthrough cases in switch statement. */

//     /* Module Resolution Options */
//     // "moduleResolution": "node",            /* 指定模块解析策略：“node”（node.js）或“classic”（TypeScript pre-1.6）。 Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
//     // "baseUrl": "./",                       /* 工作根目录 Base directory to resolve non-absolute module names. */
//     // "paths": {},                           /* 指定模块的路径，和baseUrl有关联，和webpack中resolve.alias配置一样 A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
//     // "rootDirs": [],                        /* 模块根目录 List of root folders whose combined content represents the structure of the project at runtime. */
//     // "typeRoots": [],                       /* 模块类型定义根目录 List of folders to include type definitions from. */
//     // "types": [],                           /* 指定引入的类型声明文件，默认是自动引入所有声明文件 Type declaration files to be included in compilation. */
//     // "allowSyntheticDefaultImports": true,  /* 允许从没有默认导出的模块进行默认导入。这不会影响代码发出，只会影响类型检查。Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
//     "esModuleInterop": true                /* 为所有文件导入命名空间对象 Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
//     // "preserveSymlinks": true,              /* 不要解析符号链接的实际路径。  Do not resolve the real path of symlinks. */
//     // "allowUmdGlobalAccess": true,          /* 允许从模块访问UMD全局。 Allow accessing UMD globals from modules. */

//     /* Source Map Options */
//     // "sourceRoot": "",                      /* 指定调试器应在其中定位TypeScript文件而不是源位置。 Specify the location where debugger should locate TypeScript files instead of source locations. */
//     // "mapRoot": "",                         /* 指定调试器应定位映射文件而不是生成位置的位置。Specify the location where debugger should locate map files instead of generated locations. */
//     // "inlineSourceMap": true,               /* 使用源映射生成单个文件，而不是使用单独的文件。 Emit a single file with source maps instead of having a separate file. */
//     // "inlineSources": true,                 /* 在单个文件中沿源映射发出源；需要设置“--inlineSourceMap”或“--sourceMap”。 Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

//     /* Experimental Options */
//     // "experimentalDecorators": true,        /* 启用实验性的ES装饰器 Enables experimental support for ES7 decorators. */
//     // "emitDecoratorMetadata": true,         /* 启用对为装饰器发出类型元数据的实验性支持。 Enables experimental support for emitting type metadata for decorators. */
//   }
// }
